1. Найдите еще три библиотеки (модуля), которые могут быть вам полезны в разработке.
-  validate.js (https://github.com/validatorjs/validator.js) — валидация строковых данных. Например, это методы isEmail(), isURL(), isMobilePhone(), isCreditCard();
- Imagemin (https://github.com/imagemin/imagemin) — это модуль для минификации и оптимизации изображений;
- Cors (https://www.npmjs.com/package/cors) — это пакет, содержащий реализацию ПО промежуточного слоя для Connect/Express, которое позволяет настраивать и использовать CORS.
- Gulp (https://gulpjs.com/) — еще один автоматизированный инструмент для выполнения задач. Вы можете использовать Gulp для автоматизации повторяющихся интерфейсных задач, таких как предварительная обработка CSS, автоматическое добавление префиксов, оптимизация изображений и многие другие.
    
2. Какие 2 обязательных шага нужно сделать до начала обращения к методам модулей?
- Инициализация проекта с npm
- Установка модулей npm

3. Как узнать, установлен ли у тебя менеджер пакетов npm?
Ввести в терминале npm -v. Если npm уже установлен, то он выведет номер версии. 	

4. Зачем нужен блок `finally`? 
Блок `finally`является необязательным блоком в конструкции try -> catch -> finally, его код выполняется в любом случае:
- после `try`, если не было ошибок,
- после `catch`, если ошибки были.
Секцию finally часто используют, когда мы начали что-то делать и хотим завершить это вне зависимости от того, будет ошибка или нет.

5. Есть следующий код:
let user = undefined;
alert(`Привет, ${user.name}`);
Как сделать так, чтобы при обращении к нему выводилось внятное сообщение об ошибке "Имя пользователя не заполнено"?
let user = undefined;
try {
alert(`Привет, ${user.name}`);
}
catch (err) {
alert ("Имя пользователя не заполнено");
}

6. Как сгенерировать собственную ошибку, например, в случае некорректного формата данных?
Оператор throw генерирует ошибку. В JavaScript есть множество встроенных конструкторов для стандартных ошибок: `Error`, `SyntaxError`, `ReferenceError`, `TypeError` и другие. Можно использовать и их для создания объектов ошибки.
throw new Error("Некорректный формат данных");
Пример:
let а = 15;
let b = 0;

try {
  if (b == 0) {
    throw new Error("Некорректный формат данных");
  }
  let result = a / b;

} catch (err) {
  alert("Error: " + err.message);
}


7. Какую команду надо ввести, чтобы сгенерировался файл package.json?
Команду npm init. Это запустит инициализацию вашего проекта.
После выполнения шагов npm init, файл package.json будет сгенерирован автоматически и помещён в текущий каталог.

8. Приведите пример захвата ошибки в случае некорректного преобразования данных: console.log(parseInt('ыыыы'));
let a = "ыыы";

try {
  if (isNaN(a)) {
    throw new Error("Некорректное преобразование данных");
  }
  console.log(parseInt(a));

} catch (err) {
  alert("Error: " + err.message);
}

9. Изучите документацию к библиотеке moment [https://momentjs.com/](https://momentjs.com/) и скажите, как вывести название дня недели по дате?
moment().format('dddd');  

10. Что такое сборщик и зачем он нужен? 
Сборщик собирает воедино все подключаемые пакеты, позволяет объединять клиентские файлы и модули JavaScript и загружать их как один файл в браузер пользователя. 
При использовании Browserify браузер вашего пользователя должен загрузить только один статический файл JavaScript, содержащий все-все зависимости, от которых зависит ваш проект. 
Вы можете добавить свой связанный JavaScript в качестве тега <script> на свою страницу, и все готово. 

Какие еще бывают сборщики помимо *browserify*? 
Webpack: сборщик для модулей AMD, CommonJS, ES6.