1. Какими способами можно объявлять массивы в JS? 
// квадратные скобки (обычно)
let arr = [item1, item2...];

// new Array (очень редко)
let arr = new Array(item1, item2...);

2. Приведите 3 примера, из тех, которые не были озвучены в материалах, что могло бы быть массивом? 
Список зарегистрированных пользователей сервиса, коллекция монет, все заголовки h2 на странице
    
3. Каким еще способом, кроме `pop` и `shift` можно удалять элементы из массивов?
-укоротить массив (не рекомендуется) через свойство length - nums.length = 0 (очистит массив)
-использовать метод slice() :
var fruits = ['Апельсин', 'Лимон', 'Яблоко', 'Манго'];
var citrus = fruits.slice(0, 2); // citrus содержит [ 'Апельсин', 'Лимон']

4. Можно ли пропускать части for? Что получится, если написать `for(;;)`? 
Любая часть for может быть пропущена.
Для примера, мы можем пропустить начало если нам ничего не нужно делать перед стартом цикла.
Вот так:
let i = 0; // мы уже имеем объявленную i с присвоенным значением

for (; i < 3; i++) { // нет необходимости в "начале"
  alert( i ); // 0, 1, 2
}

for (;;) {
  // будет выполняться вечно
} // При этом сами точки с запятой ; обязательно должны присутствовать, иначе будет ошибка синтаксиса.

5. Самостоятельно разберитесь, как работает цикл while и приведите два примера кода с его использованием.
Цикл while имеет следующий синтаксис:
while (condition) {
  // код
  // также называемый "телом цикла"
}
Код из тела цикла выполняется, пока условие condition истинно.
Например, цикл ниже выводит i, пока i < 3:
let i = 0;
while (i < 3) { // выводит 0, затем 1, затем 2
  alert( i );
  i++;
}

6. Какой получится массив, если создать его вот так `new Array(5)`?
Массив из 5 пустых элементов

7. Как вывести чётные числа от 2 до 10 при помощи цикла for?
for (let i = 2; i <= 10; i++) {
  if (i % 2 ) 
         continue;
	alert(i); 
}

8. Каков будет результат выполнения этого кода? Почему?
let arr = ["a", "b"];

arr.push(function() {
  alert( arr );
})

arr[2](); // a,b, function() {
  alert( arr );
}

В массив добавляется описание функции и вызывается по индексу.

9. Три основных способа перебора элементов массива?
- Цикл for (традиционный) : for (let i=0; i<arr.length; i++) – работает быстрее всего, совместим со старыми браузерами;
- Цикл for ... of : for (let item of arr) – современный синтаксис только для значений элементов (к индексам нет доступа);
- Метод forEach (появился в ES5) : arr.forEach - также современный синтаксис для вызова каких-то действий применимо к элементам массива;

10. Как можно выбрать все инпуты из вашей формы регистрации из прошлого ДЗ с помощью `querySelector*`?
let elements = document.querySelectorAll ('input')

11. Самостоятельно разберитесь, как можно проще всего сделать сортировку в массиве на JS? 
Метод массивов `sort` позволяет сортировать элементы массива и управлять выполнением сортировки. 
По умолчанию метод `sort()`: сортирует массив в порядке возрастания, а элементы привязывает к строкам.
Выполнить сортировку в алфавитном порядке довольно просто - вызовите array.sort() без любых параметров:
let myarray=["Bob", "Bully", "Amy"]
myarray.sort() // Массив становится ["Amy", "Bob", "Bully"]
Чтобы сделать его убывающим, то самым простым способом тут будет применение другого метода для массивов в комбинации с sort() — это reverse().
При работе с числами нужно иметь в виду, что по-дефолту array.sort() сортирует элементы в лексикографическом порядке, т.е. по факту элементы сравниваются как строки и сортируются так, как если бы они были строками символов, а не числами. Получается, в большинстве случаев использовать метод sort без метода обратного вызова не имеет смысла, потому что сортировка выполняется не так, как мы того ожидаем. Поэтому нам нужно явно указать, как это сделать – с помощью функции обратного вызова.

Когда такая функция передаётся в array.sort(), элементы массива сортируются, основываясь на взаимосвязи между каждой парой элементов a и b и значением, отдаваемым функцией. Есть три возможных числа, которые отдадутся функцией:<0 (меньше нуля), 0, >0 (больше нуля).
В первом случае, когда меньше нуля, a отсортируется с индексом меньшими, чем b.
При нуле: a и b будут рассматриваться как равные и сортировка производиться не будет.
Больше нуля: Сортировка b будет меньшего индекса, чем a.
То есть, для того, чтобы сортировка прошла по числам и в возрастающем порядке, функция-параметр должна быть такой:
function sortfunction(a, b){
  return (a - b)
}
Например:
let myarray=[25, 8, 7, 41]
myarray.sort(function(a,b){ 
  return a — b
}) //Массив будет [7, 8, 25, 41]


12. Как можно принудительно остановить выполнение цикла?
с помощью директивы break