1. Что такое props и можно ли использовать props в функциональных компонентах?
Это объект с данными, которые передаются реакт компоненту в качестве входящих параметров (JSX-атрибутов). Аналогичны входящим паратмерам в функции.
Да, функция может получать данные в одном объекте («пропсы») в качестве параметра.

2. Нужно ли выделять в отдельный компонент статью в блоге?
Учитывая, что статья в блоге традиционно не одна и имеет повторяющееся форматирование, будет удобнее вынести ее в отдельный компонент.

3. Можно ли использовать React без JSX?
Можно, используя React.createElement. Но такой синтаксис плохо читаем, поэтому использование JSX предпочтительно. 

4. Чем отличается JSX от HTML?
По большей части синтаксис и структура JSX и HTML совпадают, но есть некоторые важные различия:
1. Так как это похожий на XML синтаксис, одиночные теги в JSX должны быть закрыты: `<hr />`. 
2. Вместо атрибута `class` в JSX используется имя свойства в DOM: `className`.

5. Для чего нам нужны свойства (props) компонентов? 
Для минимизации кода и избежания повторения. Когда мы пишем компонент, возникает потребность в отрисовке повторяющихся элементов, отличающихся какими-то полями (например, название, картинка, описание в карточке товара).
Чтобы не создавать отдельно каждую карточку, логичнее написать компонент с входящими параметрами (пропсами).
Когда React встречает подобный элемент, он собирает все JSX-атрибуты и дочерние элементы в один объект (пропсы) и передаёт их нашему компоненту.

6. В примере с `CardList` чем можно было бы заменить `<React.Fragment>`?
Вместо <React.Fragment> вы можете обернуть код в пустые скобки <></>, но о пока что его поддерживают не все популярные инструменты.

7. Можно ли сказать, что классовые и функциональные компоненты равнозначны по функциональности?
С точки зрения React, эти два компонента эквивалентны. Но у каждого из них есть свои особенности. 
Больше всего различия будут видны, когда мы начнем говорить о внутренних состояниях компонента.
Совсем недавно, к функциональному компоненту относились как к "младшему брату" классового. 
Функциональный компонент умел только принимать свойства в одном объекте («пропсы») в качестве параметра и возвращать React-элемент.
Во многих старых статьях про React вы увидите фразу, что функциональные компоненты используются, когда нет внутреннего состояния, только props. 
Но в версии 16.8 команда React ввела hooks (хуки), не только ставя функциональные компоненты вровень с классовыми, но также делая их более лёгкими в написании и даже потенциально превосходящими своих старших собратьев. 

8. Можно ли полностью описать приложение, используя только функциональные компоненты? 
Да

9. Какой командой мы делаем экспорт компонента для возможности его использования в других местах приложения? 
export default *название компонента*;

10. Изучите структуру компонент в проекте [https://github.com/alisa-tsvetkova/EthereumUI](https://github.com/alisa-tsvetkova/EthereumUI) и напишите, какой именно компонент является самым верхним, а какой - самым "глубоким"?
Block (BlockViewer) - верхний из пользовательских компонент. В него импортируется blockInfo, в который импортируется blockTranTable (самый глубокий).
Самым верхним компонентом выступает App, затем Router - Router обычно используется в приложеии React в среде NodeJS Server, он разрешает вам определять динамичные URL но соответствуюшие философии "Single Page Application" у React. 
Для разработки приложения React вам нужно написать много Component, но нужен только один файл для обслуживания пользователей это  index.html (Это основа).


11. Какой командой можно сгенерировать разметку/компоненты на основе заранее заданного массива элементов? Приведите пример.
Для этого можно использовать метод map().
Пример ниже создаст карточки на основании массива cards.
App.js:
const cards = [
{title: 'some title', text: 'some text', image: 'url'},
{title: 'some title2', text: 'some text2', image: 'ur2l'},
{title: 'some title3', text: 'some text3', image: 'url3'},
]

class Card extends React.Component {
    render() {
        return (
            <div className="App">
		{
                cards.map((card) = > 
		  <Card title={card.title} text={card.text} image={card.image}></Card>
		)
		}
            </div>
        );
    }
}
Card.jsx:
function Card(props) {
    return (
        <div className="card">
            <div className="card-body">
                <img src={props.image} alt={props.title}/>
                <h4 className="card-title">{props.title}</h4>
                <p className="card-text">{props.text}</p>
            </div>
            <div className="card-footer">
                <button className="card-add">Learn more</button>
            </div>
        </div>
    );
}