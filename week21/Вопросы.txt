1. Приведите примеры GET-вызовов с параметрами:
- https://hh.ru/search/vacancy?text=Frontend+разработчик&search_field=name&search_field=description&area=1&salary=&currency_code=RUR&experience=noExperience&employment=full&schedule=fullDay&schedule=flexible&schedule=remote&order_by=relevance&search_period=7&items_on_page=50&no_magic=true&L_save_area=true&from=suggest_post
выдает вакансии для Frontend разработчика без опыта, работа полный день или удаленно или гибкий график, за последнюю неделю
- https://www.farfetch.com/ru/shopping/women/search/items.aspx?q=лодочки&skipsl=1
выдает результат по запросу "лодочки"
- https://tvr.vkusvill.ru/search/?q=эклер&type=products
выдает результат по запросу "эклер", поиск по товарам

2. Расскажите своими словами, чем отличаются GET и POST-запросы?
Оба метода используются для общения с сервером. GET запрашивает данные из конкретного ресурса, а POST, наоборот, отправляет данные в определенный ресурс.
GET запросы отображаются в поисковой строке, содержат пару ключ-значение, ограничены по длине. Такие запросы остаются в памяти браузеров и кэшируются
POST происходят незаметно, в теле запроса, поэтому подходят для передачи конфеденциальной информации, а также могут содержать большой объем информации и не кэшируются.
Также важно, что страницы с методом GET могут открываться повторно, в том числе из кэша или закладки, в то время как POST страницы нельзя посетить повторно, они, например, как заполненные формы создаются каждый раз с новым идентификатором.

3. Какой вид запроса лучше использовать для получения отфильтрованного списка товаров? 
GET запрос, т.к. информация не содержит конфеденциальных данных и может быть сохранена для повторного посещения

4. А какой - для формы регистрации? 
POST, т.к. здесь может быть секретная информация, большой объем и результат такого запроса - уникальная форма с определенными параметрами

5. Посмотрите на запрос и разберитесь, что он делает и что означают и на что влияют параметры api_key, q, limit, lang? 
Обращается к api.giphy.com и ищет гифки по запросу cats, выдает 25 результатов
api_key - используется для идентификации пользователя, авторизация
q - запрос, параметр поиска
limit - максимальное количество картинок
lang - язык

Как сделать так, чтобы запрос возвращал не 25, а 5 картинок? 
https://api.giphy.com/v1/gifs/search?api_key=SET_KEY_HERE&q=cats&limit=5&offset=0&rating=g&lang=en

6. Как посмотреть заголовки запроса к странице или API?
Через инструменты разработчика Chrome F12 Dev Tools, вкладка Network, заголовки запроса (Request)

7. Самостоятельно разберитесь, что такое CORS. Приведите пример их включения в запросе fetch.
Cross-Origin Resource Sharing (CORS) — механизм, использующий дополнительные HTTP-заголовки, чтобы дать возможность агенту пользователя получать разрешения на доступ к выбранным ресурсам с сервера на источнике (домене), отличном от того, что сайт использует в данный момент. 
Говорят, что агент пользователя делает запрос с другого источника (cross-origin HTTP request), если источник текущего документа отличается от запрашиваемого ресурса доменом, протоколом или портом.
Пример cross-origin запроса: HTML страница, обслуживаемая сервером с http://domain-a.com, запрашивает <img> src по адресу http://domain-b.com/image.jpg. Сегодня многие страницы загружают ресурсы вроде CSS-стилей, изображений и скриптов с разных доменов, соответствующих разным сетям доставки контента (Content delivery networks, CDNs).
В целях безопасности браузеры ограничивают cross-origin запросы, инициируемые скриптами. 
Например, XMLHttpRequest и Fetch API следуют политике одного источника (same-origin policy). 
Это значит, что web-приложения, использующие такие API, могут запрашивать HTTP-ресурсы только с того домена, с которого были загружены, пока не будут использованы CORS-заголовки.
Механизм CORS поддерживает кросс-доменные запросы и передачу данных между браузером и web-серверами по защищённому соединению. 
Современные браузеры используют CORS в API-контейнерах, таких как XMLHttpRequest или Fetch, чтобы снизить риски, присущие запросам с других источников.

Пример:
fetch('http://another.com', {
  credentials: "include"
});
Теперь fetch пошлёт куки с домена another.com вместе с нашим запросом на этот сайт.

Если сервер согласен принять запрос с авторизационными данными, он должен добавить заголовок Access-Control-Allow-Credentials: true к ответу, в дополнение к Access-Control-Allow-Origin.
200 OK
Access-Control-Allow-Origin: https://javascript.info
Access-Control-Allow-Credentials: true

8. Что можно писать в параметре заголовков Content-Type ?
Этот header указывает "mime-type" документа. 
Затем браузер определяет, как интерпретировать содержимое на основании этого. 
Например, страница html (или PHP-скрипт с выходом html) может возвращать это:
Content-Type: text/html; charset=UTF-8
"text" - это тип, а "html" - подтип документа. Заголовок также может содержать больше информации, такой как charset.
Для gif-изображения может быть отправлено это
Content-Type: image/gif
Браузер может использовать внешнее приложение или расширение браузера на основе mime-type. Например, это приведет к загрузке Adobe Reader:
Content-Type: application/pdf

Для простых запросов используются значения application/x-www-form-urlencoded, multipart/form-data или text/plain.
Также можно указать 'Content-Type': 'application/json', если посылаем JSON - запрос будет сложным.
	

9. Давайте отправим информацию о собачке в API по адресу localhost/pets/add 
    let dog = `[
        {
            "breed": "Beagle",
            "size": "large",
            "color": "orange",
            "age": 6
        }
    ]`;

    let response = () => {
        fetch('localhost/pets/add ', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json;charset=utf-8'
                },
                body: dog
            })
            .catch(error => console.log(error));
    }

10.Изучите статью https://learn.javascript.ru/promise-basics и самостоятельно разберитесь, что такое промисы. Напишите в 1-2 предложения, что это такое и приведите пример, где вы уже сталкивались с промисами?
Промис(Обещание) — это объект который содержит будущее значение асинхронной операции. 
Например, если вы запрашиваете некоторые данные с сервера, промис обещает нам получить эти данные, которые мы сможем использовать в будущем.
Конструктор Промисов принимает один аргумент, обратный вызов, также известный как исполнительная функция, которая принимает 2 обратных вызова, resolve и reject.
Исполнительная функция выполняется сразу же после создания промиса. 
Промис становится выполненным при помощи вызова resolve(), а отклоненным при помощи reject().
Имеет 3 состояния:
1) нерешенный(в ожидании), 
2) решенный/resolved (выполненный) или 
3) отклоненный/rejected.

С промисами сталкивались в методе fetch












