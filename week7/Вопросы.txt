1. Как сделать так, чтобы при просмотре на телефоне текст стал читаемым, а картинка - большой? 
Использовать специальный тег <meta> с атрибутом name="viewport":
<meta name="viewport" content="width=device-width, initial-scale=1">
Здесь `initial-scale=1` говорит о том, что размер страницы в браузере будет равен 100% величины области просмотра. Это означает, что 1 пиксель окна просмотра будет = 1 пиксель CSS.
`width=device-width` говорит о том, что ширина страницы будет равна 100% ширины окна любого браузера. То есть, ширина страницы сайта соответствует ширине устройства, поэтому её не надо масштабировать.
2. В чём разница между отзывчивым и адаптивным веб-дизайном?
Отзывчивый дизайн масштабируется в зависимости от размера экрана, адаптивный - перестраивается в соответствии с размером экрана. Таким образом, в отзывчивом дизайне один макет для всех устройств, в адаптивном — отдельный макет для каждого вида устройства.
Отзывчивый дизайн — проектирование сайта с определенными значениями свойств, например, гибкая сетка макета, которые позволяют одному макету работать на разных устройствах. 
Главная особенность отзывчивого веб-дизайна — за счёт подвижной сетки макет автоматически реагирует на изменение размеров экрана, раздуваясь или сужаясь. Гибкость макета базируется на использовании относительных единиц измерения вместо фиксированных пиксельных значений, что позволяет регулировать ширину в соответствии с доступным пространством.
Адаптивный дизайн, или динамический показ — проектирование сайта с условиями, которые изменяются в зависимости от устройства, базируясь на нескольких макетах фиксированной ширины.
В отличие от отзывчивого дизайна, адаптивный дизайн (Adaptive Web Design) ориентируется на размеры устройств. Он использует несколько статичных макетов для разных типов устройств (мобильные устройства, планшеты, настольные компьютеры), базируясь на контрольных (переломных) точках. То есть макеты загружаются при определенных размерах окна браузера устройства, а переходы между макетами происходят скачкообразно, а не плавно.
В адаптивных макетах главную роль играет функциональность, то есть при создании дизайна учитываются особенности устройств, например, сенсорное управление для мобильных устройств или большие пространства для настольных мониторов.
3. Какие величины лучше использовать для шрифтов в гибком дизайне? 
гибкие - в %, em, vw
4. Какой вид верстки использован на этой картинке? К какой категории шаблонов он относится? 
Первая - отзывчивый, вторая - адаптивный
Layout Shifter
5. Как задать стили для экранов шириной от 800 до 1200 пикселей?
@media (min-width: 800px) and (max-width: 1200px) {
/* CSS-стили */;
}
6. Приведите минимум 2 примера как подключать медиазапросы? 
1) С помощью HTML:
<link rel="stylesheet" media="screen and (color)" href="example.css">
2) С помощью правила `@import` внутри элемента `<style>` или внешней таблицы стилей:
@import url(color.css) screen and (color);
3) Непосредственно в коде страницы:
<style>
@media (max-width: 600px) {
  #sidebar {display: none;}
}
</style>
4) Внутри таблицы стилей style.css:
@media (max-width: 600px) {
  #sidebar {display: none;}
}
7. Как можно задавать гибкие изображения?
- Указать максимальную ширину изображения img {width: 100%; max-width: 100%;} и поместить его в контейнер с необходимым для макета размером
- варьировать изображения в зависимости от размера экрана с помощью элемента <picture> и медиазапроса.
8. Как задать стили только для landscape поворота экрана? И что вообще такое landscape и чем он отличается от portrait?
landscape  - это режим, в котором ширина viewport больше её высоты 
portrait - это режим, в котором высота viewport больше ширины
@media (orientation: landscape) { стили }
@media (orientation: portrait) { display: none }
9. Назовите минимум 3 способа как можно тестировать, как выглядит сайт при разных размерах экранов?
изменяя окно браузера, через инструменты разработчика по кнопке f12, на специальных сайтах, открывая ссылку на разных устройствах
10. Самостоятельно изучите, как можно подключить несколько картинок разных размеров через один тег <img>?
Использовать атрибуты srcset and sizes, позволяющих добавить дополнительные изображения с пометками, чтобы браузер выбрал подходящее.
Пример:
<img srcset="elva-fairy-320w.jpg 320w, elva-fairy-480w.jpg 480w, elva-fairy-800w.jpg 800w"sizes="(max-width: 320px) 280px, (max-width: 480px) 440px, 800px"src="elva-fairy-800w.jpg" alt="Elva dressed as a fairy">
srcset включает названия изображений, среди которых браузер выберет нужное и их размеры. ****Перед каждой запятой части значения в таком порядке:
1) Название изображения (elva-fairy-480w.jpg.)
2) Пробел.
3) Актуальная ширина картинки в пикселах (480w) — заметьте, что здесь используется w вместо px, как вы могли ожидать. Эта настоящая ширина изображения, которая может быть просмотрена в свойствах картинки на вашем компьютере.
sizes определяет перечень медиавыражений (например, ширину экрана) и указывает предпочтительную ширину изображения, когда определённое медиавыражение истинно. В нашем случае, перед каждой запятой мы пишем:
1) Медиа-условие ((max-width:480px)) — описывает возможное состояние экрана. В этом случае, мы говорим "когда viewport width меньше или равен 480 пикселям".
2) Пробел.
3) Ширину слота (в оригинале "width of the slot"), занимаемую изображением, когда медиа-условие истинно. (440px)
Note: Для ширины слота, вы можете указать абсолютные значения (px, em) или значение относительно окна просмотра (vw), но НЕ проценты. Вы могли заметить, что у последнего слота нет медиа-условия — это значение по умолчанию, которое станет актуальным, если ни одно из предыдущих медиа-условий не будет истинно. Браузер игнорирует все последующие проверки после первого совпадения, так что будьте внимательнее к порядку их объявления.
