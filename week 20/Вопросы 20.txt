1. Напишите JSON к вашим ответам на вопрос 2 из прошлой недели.
инвентарь (наименование, бренд, предназначение, стоимость, количество единиц):
[{
    "title": "гантель 2кг",
    "brand": "Kettler",
    "purpose": ["Фитнес", "Кардиотренировки"],
    "price": "1000 руб",
    "quantity": 20

},{
    "title": "коврик для фитнеса",
    "brand": "Kettler",
    "purpose": ["Фитнес", "Йога"],
    "price": "2000 руб",
    "quantity": 30
},{
    "title": "беговая дорожка",
    "brand": "Kettler",
    "purpose": ["Кардиотренировки"],
    "price": "100 000 руб",
    "quantity": 10
}]

2. Самостоятельно разберитесь, что за формат данных XML и чем он отличается от JSON? 
eXtensible Markup Language (XML) - XML, в переводе с англ eXtensible Markup Language — расширяемый язык разметки. 
Используется для хранения и передачи данных. Так что увидеть его можно не только в API, но и в коде. 
XML хранит данные в текстовом формате. Это обеспечивает независимый от программного и аппаратного обеспечения способ хранения, транспортировки и обмена данными. 
XML также облегчает расширение или обновление до новых операционных систем, новых приложений или новых браузеров без потери данных.
Этот формат рекомендован Консорциумом Всемирной паутины (W3C), поэтому он часто используется для передачи данных по API 
Тэги XML напоминают тэги HTML, но XML гораздо более гибкий, поскольку он позволяет пользователям определять свои собственные тэги. 
Таким образом, XML действует как мета-язык, то есть его можно применить для определения других языков, например RSS (en-US). 
Если HTML является языком презентации, то XML является языком описания данных. Это означает, что XML имеет гораздо более широкое применение, чем просто веб-интерфейс. 
Например, веб-службы могут использовать XML для обмена запросами и ответами. 
Возможности XML перечислены ниже:
- Он более эффективно обрабатывает сложные структуры данных.
- XML описывает данные на языке разметки.
- Он имеет возможность управлять данными в древовидной структуре, имеющей только один корневой элемент.

Синтаксис XML:
- Весь XML документ должен иметь корневой элемент.
- Все теги должны быть закрыты (либо самозакрывающийся тег).
- Все теги должны быть правильно вложены.
- Имена тегов чувствительны к регистру.
- Имена тегов не могут содержать пробелы.
- Значения атрибута должны появляться в кавычках («»).
- Атрибуты не могут иметь вложения (в отличие от тегов).
- Пробел сохраняется.

Преимущества:
- Поддержка метаданных
- Одним из самых больших преимуществ XML является то, что мы можем помещать метаданные в теги в форме атрибутов. 
В JSON атрибуты будут добавлены как другие поля-члены в представлении данных, которые НЕ могут быть желательны.
- Визуализация браузера
- Большинство браузеров отображают XML в удобочитаемой и организованной форме. 
Древовидная структура XML в браузере позволяет пользователям естественным образом сворачивать отдельные элементы дерева. 
Эта функция будет особенно полезна при отладке.
- Поддержка смешанного контента
- Хорошим вариантом использования XML является возможность передачи смешанного контента в пределах одной и той же полезной нагрузки данных. Этот смешанный контент четко различается по разным тегам.

Ключевое различие между JSON и XML заключается в том, что JSON имеет меньший размер файла и эффективно передает данные в Интернет по сравнению с XML. 
JSON обращается к данным через объекты JSON, тогда как XML требует анализа данных. 
JSON легко читается, поскольку имеет более организованную структуру кода, а XML трудно интерпретировать из-за его сложной структуры.
JSON хорош для передачи данных, поскольку он не требует обработки, тогда как XML может быть сложным, поскольку он позволяет не только передавать данные, но также обрабатывать и форматировать файлы. 
JSON наименее безопасен в отличие от XML. JSON не может поддерживать пространства имен, но способен полностью поддерживать инструментарий Ajax. 
Напротив, XML поддерживает пространства имен, но не может поддерживать инструменты Ajax.
XML хранит данные иначе, чем JSON: JSON хранит данные как карту, XML, напротив, хранит данные как древовидную структуру. 
Кроме того, JSON использует массивы, но не имеет закрывающих тегов.

Приведите пример, как один и тот же объект собачки с картинки ниже будет выглядеть в JSON и в XML?
JSON:
{
    "breed": "Beagle",
    "size": "large",
    "color": "orange",
    "age": "6 years"
}

XML:

<dogs>
<dog>
<breed> Beagle </breed>
<size> large </size>
<color> orange </color>
<age> 6 years </age>
</dog>
</dogs>

3. Что такое сериализация и десериализация (парсинг)? В каких ситуациях они нужны? 
Сериализация - процесс, посредством которого объект или структура данных преобразуются в формат, пригодный для передачи по сети или хранения (например, в формате буфера массива или файла).
В JavaScript, например, вы можете сериализовать объект в строку JSON, вызвав функцию . JSON.stringify().
В веб-разработке JSON очень часто применяется в качестве формата для передачи информации от веб-сервера клиенту (веб-браузеру).
Процесс можно представить в виде двух шагов. На первом шаге сервер по запросу клиента сначала формирует некоторый набор данных в удобном формате, который затем можно было бы очень просто упаковать в строку JSON. 
Завершается работа на сервере отправкой JSON данных в качестве результата клиенту. 
На втором шаге клиент получает в качестве ответа от сервера строку JSON и распаковывает (десериализует, парсит) её, т.е. превращает в JavaScript объект. 
После этого на клиенте выполняются дальнейшие с ними действия, например, выводятся на страницу. 
Также если нам нужно отправить какие-то данные на сервер, то мы должны сначала упаковать их в строку JSON-формата (сериализовать) и только потом отправлять.
Для сериализации объекта javascript в json применяется функция JSON.stringify().
Для обратной операции - десериализации или парсинга json-объекта в javascript применяется метод JSON.parse().

4. Можно ли обработать ответ от сервера одновременно и как текст, и как JSON?
Нет, мы можем выбрать только один метод чтения ответа. 
Если мы уже получили ответ с response.text(), тогда response.json() не сработает, так как данные уже были обработаны.

5. В чем особенность асинхронных запросов?
Одна из самых сложных частей с пониманием того, как работает JavaScript - это работа с асинхронностью, где все происходит без определенного порядка.
В JS у нас есть операции, которые выполняются в фоновом/активном режиме, и поэтому наше веб-приложение не зависает каждый раз, когда оно ожидает пользовательское событие.
Тем не менее, иногда все должно проходить по порядку, иначе это вызовет хаос и неожиданные результаты. 
По этой причине мы можем использовать асинхронные вызовы, чтобы все работало как нужно. 
Примером может быть проверка учетных данных пользователя перед переходом к следующей операции.

6. В чем преимущество AJAX-запросов перед старым способом работы с сервером через <form action="имя скрипта на сервере">?
Основные преимущества использования AJAX:
- снижение трафика (из-за уменьшения объёма передаваемых данных между клиентом и сервером);
- уменьшение нагрузки на сервер (не нужно генерировать всю страницу, а только ту часть, которую нужно обновить);
- увеличение быстродействия и отзывчивости (нет необходимости в полной перезагрузки страницы, достаточно обновить содержимое только отдельных блоков);
- повышение интерактивности (с помощью AJAX можно сразу отображать результаты и сделать ресурс более удобным для пользования).
 ______________________________________

7. Напишите, как будет выглядеть fetch для получения данных вашего пользователя на github?
fetch('https://api.github.com/users/AnnaBegisheva')
  .then(response => response.json())
  .then(commits => alert(commits[0].author.login));

8. Самостоятельно разберитесь, что такое SPA? 
Single Page Application – сокращенно SPA, в переводе на русский язык означает “Приложение одной страницы”. 
Другими словами SPA – это web-приложение, размещенное на одной web-странице, которая для обеспечения работы загружает весь необходимый код (все javascript-файлы (модули, виджиты, контролы и т.д.), а также файлы CSS) вместе с загрузкой самой страницы. 
Приложение такого типа появились сравнительно недавно, с началом эры HTML5 и SPA является типичным представителем приложений на HTML5.
Благодаря динамическому обновлению с помощью JavaScript, во время использования не нужно перезагружать или подгружать дополнительные страницы. 
На практике это означает, что пользователь видит в браузере весь основной контент, а при прокрутке или переходах на другие страницы, вместо полной перезагрузки нужные элементы просто подгружаются.
В процессе работы пользователю может показаться, что он запустил не веб-сайт, а десктопное приложение, так как оно мгновенно реагирует на все его действия, без задержек и «подвисаний».
Примеры динамических приложений: Gmail, Google Maps, Facebok, GitHub, Meduza.
Преимущества
- высокая скорость — все ресурсы загружаются за одну сессию, а во время действий на странице данные просто меняются, что очень экономит время;
- гибкость и отзывчивость пользовательского интерфейса — за счет того, что веб-страница всего одна, проще построить насыщенный интерфейс, хранить сведения о сеансе, управлять состояниями представлений и анимацией;
- упрощенная разработка — код можно начинать писать с файла file://URL, не используя сервер, не нужен отдельный код для рендера страницы на стороне сервера;
- кэширование данных — приложение отправляет всего один запрос, собирает данные, а после этого может функционировать в offline-режиме.
Недостатки
- Seo оптимизация требует решений в виде серверного рендеринга — из-за того, что контент загружается при помощи технологии AJAX, которая подразумевает динамическое изменение содержания станицы, а для оптимизации важна устойчивость;
- нагрузка на браузер — из-за того, что клиентские фреймворки тяжелые, они довольно долго загружаются;
- необходима поддержка JavaScript — без JS нельзя полноценно пользоваться полным функционалом приложения;
- утечка памяти в Java Script — из-за плохой защиты, SPA больше подвержена действиям злоумышленников и утечке памяти.








