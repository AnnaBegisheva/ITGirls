1. В чем разница между контролируемыми и неконтролируемыми компонентами?
У управляемых компонентов (controlled components) данные хранятся в состоянии React.
У них есть атрибут их текущего состояния и метод, вызывающийся при их изменении.
В управляемом компоненте, данные формы обрабатываются React-компонентом.
Неуправляемые компоненты хранят данные формы прямо в DOM. 
Неуправляемые компоненты опираются на DOM в качестве источника данных и могут быть удобны при интеграции React с кодом, не связанным с React. 
Количество кода может уменьшиться, правда, за счёт потери в его чистоте. 
Поэтому в обычных ситуациях рекомендуется использовать управляемые компоненты.

2. Есть ли смысл использовать метод `shouldComponentUpdate()` в `PureComponent`?
Нет, т.к. PureComponent изменяет метод shouldComponentUpdate, автоматически проверяя, нужно ли заново отрисовывать компонент. 

3. Будет ли перерисовываться данный компонент?   
    class PureComponent extends React.PureComponent {
      state = { 
        item: {
    			count:0
    		},
      }
      
      handleClick= () =>  {
        const item = this.state.item;
        item.count = this.state.item.count ++ ;
        this.setState({item});
      }
      render() {
        return <h2>{this.state.item.count}</h2>
      }
    }
Т.к. нет обработчика, то не будет :)
Если добавить onClick, то все равно не будет работать, т.к. состояние - это объект, соответственно оно хранится по ссылке на созданную ячейку памяти. 
Инкремент не будет менять ссылку на объект и поверхностная проверка React.PureComponent не отловит изменение
    
4. Что будет, если чекбоксу не передать свойство '`checked`'?
Чекбокс не будет выбран

5. В чем главное преимущество использования `PureComponent`?
React.PureComponent изменяет метод жизненного цикла shouldComponentUpdate, автоматически проверяя, нужно ли заново отрисовывать компонент. 
При этом PureComponent будет вызывать рендер только если обнаружит изменения в state или props компонента. 
Таким образом сокращается количество рендеров в приложении, а значит и React, в свою очередь, производит намного меньше операций. 
Это и дает плюс производительности

6. Что будет, если компоненту `input` передать метод `onChange`, но не передать `value`?
Компонент будет работать и считывать состояние

А что будет, если компоненту `input` передать `value`, но не передать метод `onChange`?
Состояние при наборе текста считываться не будет, value=undefined

7. Как сделать из обычного `select` список с несколькими выбранными значениями (мультиселект)?
В атрибут value передать массив:
<select multiple={true} value={['Б', 'В']}>

8. Напишите пример валидации текстового поля на React - чтобы оно было не пустым
function Input() {
const [input, setInput] = useState();

  const handleSubmit = (e) => {
    e.preventDefault();

    if (input.trim().length === 0) {
      alert('Add some text');
      return;
    }
// some code
}

return (
<form 
          <textarea
            rows="5"
            cols="50"
            onChange={(e) => setInput(e.target.value)}
            value={input}
          />
 <button type="submit" onClick={handleSubmit}>
/>
  );
}

9. Приведите пример простейшей формы логина на сторонних компонентах (Formic, Material или Bootstrap на ваш выбор)
import React, { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";

function App() {
  const [password, setPassword] = useState("");
  const [email, setEmail] = useState("");
  const [passwordError, setpasswordError] = useState("");
  const [emailError, setemailError] = useState("");

  const handleValidation = (event) => {
    let formIsValid = true;

    if (!email.match(/^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/)) {
      formIsValid = false;
      setemailError("Email Not Valid");
      return false;
    } else {
      setemailError("");
      formIsValid = true;
    }

    if (!password.match(/^[a-zA-Z]{8,22}$/)) {
      formIsValid = false;
      setpasswordError(
        "Only Letters and length must best min 8 Chracters and Max 22 Chracters"
      );
      return false;
    } else {
      setpasswordError("");
      formIsValid = true;
    }

    return formIsValid;
  };

  const loginSubmit = (e) => {
    e.preventDefault();
    handleValidation();
  };

  return (
    <div className="App">
      <div className="container">
        <div className="row d-flex justify-content-center">
          <div className="col-md-4">
            <form id="loginform" onSubmit={loginSubmit}>
              <div className="form-group">
                <label>Email address</label>
                <input
                  type="email"
                  className="form-control"
                  id="EmailInput"
                  name="EmailInput"
                  aria-describedby="emailHelp"
                  placeholder="Enter email"
                  onChange={(event) => setEmail(event.target.value)}
                />
                <small id="emailHelp" className="text-danger form-text">
                  {emailError}
                </small>
              </div>
              <div className="form-group">
                <label>Password</label>
                <input
                  type="password"
                  className="form-control"
                  id="exampleInputPassword1"
                  placeholder="Password"
                  onChange={(event) => setPassword(event.target.value)}
                />
                <small id="passworderror" className="text-danger form-text">
                  {passwordError}
                </small>
              </div>
              <button type="submit" className="btn btn-primary">
                Submit
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}
export default App;
